// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.19.1
// source: room.sql

package database

import (
	"context"
)

const createRoom = `-- name: CreateRoom :one
INSERT INTO rooms (
    room_id,
    owner_id,
    is_private,
    max_players
) VALUES (
    $1,
    $2,
    $3,
    $4
) RETURNING id
`

type CreateRoomParams struct {
	RoomID     string `json:"room_id"`
	OwnerID    int32  `json:"owner_id"`
	IsPrivate  bool   `json:"is_private"`
	MaxPlayers int32  `json:"max_players"`
}

func (q *Queries) CreateRoom(ctx context.Context, arg CreateRoomParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, createRoom,
		arg.RoomID,
		arg.OwnerID,
		arg.IsPrivate,
		arg.MaxPlayers,
	)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const deleteRooms = `-- name: DeleteRooms :exec
DELETE FROM rooms
WHERE deleted_at IS NOT NULL
`

func (q *Queries) DeleteRooms(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, deleteRooms)
	return err
}

const getRoom = `-- name: GetRoom :one
SELECT
    id,
    room_id,
    owner_id,
    is_private,
    max_players
FROM rooms
WHERE id = $1 AND deleted_at IS NULL
`

type GetRoomRow struct {
	ID         int64  `json:"id"`
	RoomID     string `json:"room_id"`
	OwnerID    int32  `json:"owner_id"`
	IsPrivate  bool   `json:"is_private"`
	MaxPlayers int32  `json:"max_players"`
}

func (q *Queries) GetRoom(ctx context.Context, id int64) (GetRoomRow, error) {
	row := q.db.QueryRowContext(ctx, getRoom, id)
	var i GetRoomRow
	err := row.Scan(
		&i.ID,
		&i.RoomID,
		&i.OwnerID,
		&i.IsPrivate,
		&i.MaxPlayers,
	)
	return i, err
}

const getRooms = `-- name: GetRooms :many
SELECT
    rooms.id,
    room_id,
    owner_id,
    is_private,
    max_players
    
FROM rooms
LEFT JOIN users ON rooms.owner_id = users.id
WHERE rooms.deleted_at IS NULL AND rooms.expired_at < NOW()
ORDER BY rooms.created_at DESC
LIMIT $1 OFFSET $2
`

type GetRoomsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

type GetRoomsRow struct {
	ID         int64  `json:"id"`
	RoomID     string `json:"room_id"`
	OwnerID    int32  `json:"owner_id"`
	IsPrivate  bool   `json:"is_private"`
	MaxPlayers int32  `json:"max_players"`
}

func (q *Queries) GetRooms(ctx context.Context, arg GetRoomsParams) ([]GetRoomsRow, error) {
	rows, err := q.db.QueryContext(ctx, getRooms, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetRoomsRow{}
	for rows.Next() {
		var i GetRoomsRow
		if err := rows.Scan(
			&i.ID,
			&i.RoomID,
			&i.OwnerID,
			&i.IsPrivate,
			&i.MaxPlayers,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
