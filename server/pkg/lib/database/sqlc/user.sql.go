// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.19.1
// source: user.sql

package database

import (
	"context"
	"database/sql"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (
    username,
    email,
    hash_password,
    avatar_url,
    oauth_id,
    oauth_type
) VALUES (
    $1,
    $2,
    $3,
    $4,
    $5,
    $6
) RETURNING id
`

type CreateUserParams struct {
	Username     string         `json:"username"`
	Email        sql.NullString `json:"email"`
	HashPassword sql.NullString `json:"hash_password"`
	AvatarUrl    sql.NullString `json:"avatar_url"`
	OauthID      sql.NullString `json:"oauth_id"`
	OauthType    sql.NullString `json:"oauth_type"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.Username,
		arg.Email,
		arg.HashPassword,
		arg.AvatarUrl,
		arg.OauthID,
		arg.OauthType,
	)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const deleteUsers = `-- name: DeleteUsers :exec
DELETE FROM users
WHERE deleted_at IS NOT NULL
`

func (q *Queries) DeleteUsers(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, deleteUsers)
	return err
}

const getUser = `-- name: GetUser :one
SELECT
    id,
    username,
    email,
    avatar_url,
    oauth_id,
    oauth_type
FROM users 
WHERE id = $1 AND deleted_at IS NULL
`

type GetUserRow struct {
	ID        int64          `json:"id"`
	Username  string         `json:"username"`
	Email     sql.NullString `json:"email"`
	AvatarUrl sql.NullString `json:"avatar_url"`
	OauthID   sql.NullString `json:"oauth_id"`
	OauthType sql.NullString `json:"oauth_type"`
}

func (q *Queries) GetUser(ctx context.Context, id int64) (GetUserRow, error) {
	row := q.db.QueryRowContext(ctx, getUser, id)
	var i GetUserRow
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.AvatarUrl,
		&i.OauthID,
		&i.OauthType,
	)
	return i, err
}

const getUsers = `-- name: GetUsers :many
SELECT
    id,
    username,
    email,
    avatar_url,
    oauth_id,
    oauth_type
FROM users
ORDER BY created_at DESC
LIMIT $1 OFFSET $2
`

type GetUsersParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

type GetUsersRow struct {
	ID        int64          `json:"id"`
	Username  string         `json:"username"`
	Email     sql.NullString `json:"email"`
	AvatarUrl sql.NullString `json:"avatar_url"`
	OauthID   sql.NullString `json:"oauth_id"`
	OauthType sql.NullString `json:"oauth_type"`
}

func (q *Queries) GetUsers(ctx context.Context, arg GetUsersParams) ([]GetUsersRow, error) {
	rows, err := q.db.QueryContext(ctx, getUsers, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetUsersRow{}
	for rows.Next() {
		var i GetUsersRow
		if err := rows.Scan(
			&i.ID,
			&i.Username,
			&i.Email,
			&i.AvatarUrl,
			&i.OauthID,
			&i.OauthType,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUser = `-- name: UpdateUser :exec
UPDATE users SET
    username = $1,
    avatar_url = $2
WHERE id = $3 AND deleted_at IS NULL
`

type UpdateUserParams struct {
	Username  string         `json:"username"`
	AvatarUrl sql.NullString `json:"avatar_url"`
	ID        int64          `json:"id"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) error {
	_, err := q.db.ExecContext(ctx, updateUser, arg.Username, arg.AvatarUrl, arg.ID)
	return err
}
